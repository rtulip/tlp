use "sys_x86_64_linux.tlp"

fn Str.Size Str -> int do 
    split drop
end 

fn Str.Data Str -> ptr do 
    split swap drop
end

// File permissions
const O_RDONLY    0       end 
const O_WRONLY    1       end
const O_RDWR      1 1 <<  end
const O_CREAT     1 6 <<  end
const O_EXCL      1 7 <<  end
const O_NOCTTY    1 8 <<  end
const O_TRUNC     1 9 <<  end
const O_APPEND    1 10 << end
const O_DIRECOTRY 1 15 << end
const O_NOFOLLOW  1 17 << end
const O_CLOEXEC   1 19 << end

// Other user permission values
const S_IXOTH 1      end
const S_IWOTH 1 1 << end
const S_IROTH 1 2 << end
const S_IRWXO 
    S_IXOTH S_IWOTH S_IROTH or or
end

// Group permission values 

const S_IXGRP 1 3 << end
const S_IWGRP 1 4 << end
const S_IRGRP 1 5 << end
const S_IRWXG
    S_IXGRP S_IWGRP S_IRGRP or or
end

// User permission values
const S_IXUSR 1 6 << end
const S_IWUSR 1 7 << end
const S_IRUSR 1 8 << end
const S_IRWXU
    S_IRUSR S_IWUSR S_IXUSR or or
end

const S_ISVTX 1 9  << end
const S_ISUID 1 10 << end
const S_ISGID 1 11 << end


fn exit int do
    sys_exit
end

// Prints a string to stderr.
// No error handling is done here.
fn eputs Str do
    split 2 as FileDesc sys_write drop drop
end     

// Prints a String to stdout.
// Error messages put to stderr.
fn puts Str do
    dup split 1 as FileDesc
    
    if sys_write swap drop do
        drop    // Str
    else
        "Failed to write to stdout:\n\t[Note]: " eputs 
        eputs
        1 exit
    end
end

fn putb bool do
    if do
        "True\n" puts
    else
        "False\n" puts
    end
end

// Prints a String to a file.
// Error handling message is put to stderr
fn fputs 
    FileDesc Str
    -> 
    FileDesc
do 
    2 group dup
    dup group.1 Str.Size swap
    dup group.1 Str.Data swap
    group.0
    
    if sys_write swap drop do else
        "Failed to write to file:\n" eputs
        "\t[Text]: " eputs 
        dup group.1 eputs
        1 exit
    end

    group.0

end 

fn fopen
    int int Str // Mode Flags Filename
    ->
    FileDesc
do
    // Save the filename on the stack before the Mode
    3 group dup group.2 swap split

    // Extract just the pointer to the data from Str
    Str.Data 
    
    if sys_open do
        // Drop the String as it's not needed for error handling
        swap drop
    else 
        "Failed to open file: `" eputs
        swap eputs
        "`\n" eputs

        1 exit
    end
end

fn fclose FileDesc do
    if sys_close do else 
        "Failed to close file\n" eputs
        1 exit
    end
end

fn stat ptr Str do
    Str.Data
    if sys_stat do else 
        "Stat failed\n" eputs
    end
end