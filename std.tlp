use "sys_x86_64_linux.tlp"
use "libs/str.tlp"

fn NULL -> ptr do
    0 cast(ptr)
end

// File permissions
const O_RDONLY    0       end 
const O_WRONLY    1       end
const O_RDWR      1 1 <<  end
const O_CREAT     1 6 <<  end
const O_EXCL      1 7 <<  end
const O_NOCTTY    1 8 <<  end
const O_TRUNC     1 9 <<  end
const O_APPEND    1 10 << end
const O_DIRECOTRY 1 15 << end
const O_NOFOLLOW  1 17 << end
const O_CLOEXEC   1 19 << end

// Other user permission values
const S_IXOTH 1      end
const S_IWOTH 1 1 << end
const S_IROTH 1 2 << end
const S_IRWXO 
    S_IXOTH S_IWOTH S_IROTH or or
end

// Group permission values 

const S_IXGRP 1 3 << end
const S_IWGRP 1 4 << end
const S_IRGRP 1 5 << end
const S_IRWXG
    S_IXGRP S_IWGRP S_IRGRP or or
end

// User permission values
const S_IXUSR 1 6 << end
const S_IWUSR 1 7 << end
const S_IRUSR 1 8 << end
const S_IRWXU
    S_IRUSR S_IWUSR S_IXUSR or or
end

const S_ISVTX 1 9  << end
const S_ISUID 1 10 << end
const S_ISGID 1 11 << end

fn stdout -> FileDesc do
    1 cast(FileDesc)
end

fn stderr -> FileDesc do
    1 cast(FileDesc)
end

fn exit int do
    sys_exit
end

fn eputs Str end

// Prints a String to a file.
// Error handling message is put to stderr
fn fputs 
    FileDesc Str  
    -> 
    FileDesc
do 
    swap push split pop dup push
    if sys_write swap drop not do
        "Failed to write to file:\n" eputs
        1 exit
    end
    pop
end

fn puts Str do stdout swap fputs drop end
fn eputs Str do stderr swap fputs drop end

const PUTD_BUFFER_SIZE 20 end
reserve putd_buffer PUTD_BUFFER_SIZE end
fn fputd FileDesc int -> FileDesc do

    if dup 0 == do
        drop "0" fputs 
    else
    
        putd_buffer PUTD_BUFFER_SIZE 1 - ptr+ swap

        // FD ptr int 
        while dup 0 > do

            2 group dup split

            // ptr int
            10 % 48 + swap !8
            
            split
            10 / swap
            1 ptr- swap

        end drop

        cast(int) 1 +

        dup putd_buffer cast(int) PUTD_BUFFER_SIZE + swap -
        swap cast(ptr)
        cast(Str) fputs

    end
end

fn eputd int do stderr swap fputd drop end
fn putd int do stdout swap fputd drop end

fn fputb FileDesc bool  -> FileDesc do
    if do
        "True" fputs
    else
        "False" fputs
    end
end

fn putb bool do
    stdout swap fputb drop
end

fn fopen
    int int Str // Mode Flags Filename
    ->
    FileDesc
do
    Str.Data
    if sys_open not do
        "Failed to open file\n" eputs
        1 exit
    end
end

fn fclose FileDesc do
    if sys_close not do
        "Failed to close file\n" eputs
        1 exit
    end
end

fn stat ptr Str do
    Str.Data
    if sys_stat not do 
        "Stat failed\n" eputs
    end
end


const STATBUF_CAP 144 end
const STATBUF_SIZE_OFFSET 48 end
reserve statbuf STATBUF_CAP end
fn statbuf.size ptr -> int do
    STATBUF_SIZE_OFFSET ptr+ @64
end

const FILE_BUFFER_CAP 1000000 end
reserve file_buffer FILE_BUFFER_CAP end
fn load_file_to_str Str -> Str do
    dup statbuf swap stat

    if statbuf statbuf.size FILE_BUFFER_CAP > do 
        "File too big to read.\n" eputs
        1 exit
    end

    O_RDONLY swap 0 swap fopen dup
    statbuf statbuf.size swap
    file_buffer swap
    
    if sys_read do
        drop
        fclose
    else
        "Failed to read from file\n" eputs
        drop
        fclose 
        1 exit
    end
    
    statbuf statbuf.size file_buffer cast(Str)

end 

fn exp 
    int // base
    int // exponent
    -> 
    int // result
do
    swap push 1 swap

    while dup 0 > do
        1 -
        swap pop dup push * swap 
    end drop

    pop drop

end

fn Str.ToInt Str -> int do 
    if dup Str.Numeric do 
        0 push
        while dup Str.Size 0 > do 

            dup dup
                Str.Size 1 - 10 swap exp swap
                0 Str.At ASCII_0 -
                *
            pop + push

            1 Str.ShiftRightBy 
        end drop

        pop
        
    else 
        eputs "is not numeric!\n" eputs
        1 exit
        0
    end

end

