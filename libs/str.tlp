const ASCII_DOUBLE_QUOTE 34 end
const ASCII_0 48 end
const ASCII_9 ASCII_0 9 + end

fn Str.At Str int -> int do
    // TODO: Check bounds
    swap Str.Data cast(int) swap + cast(ptr) @8 
end 

fn Str.ShiftRightBy Str int -> Str do 

    // TODO: Check bounds
    2 group

    dup split swap
    Str.Data cast(int) swap + cast(ptr)
    swap 

    split swap
    Str.Size swap -
    swap

    cast(Str)

end

fn Str.ShiftLeftBy Str int -> Str do
    // TODO: Check Bounds

    // (S-n) [S n]
    2 group 
    dup split swap
    Str.Size swap -
    swap

    group.0 Str.Data
    cast(Str)


end

fn Str.Equals Str Str -> bool do
    
    // 2dup
    2 group dup 
    group.0 swap dup 
    group.1 swap dup
    group.0 swap
    group.1

    if Str.Size swap Str.Size == do
        true swap

        // Str1 Bool Str2
        while dup Str.Size 0 > do

            3 group dup 
            group.0 1 Str.ShiftRightBy swap
            dup dup split
            0 Str.At swap
            drop swap
            0 Str.At == swap
            group.1 and swap 
            group.2 1 Str.ShiftRightBy

        end

        drop swap drop
    else
        drop drop false
    end

end


fn Str.StartsWith Str Str -> bool do    
    2 group dup split
    Str.Size swap
    Str.Size swap

    if < do
        drop false
    else
        // S_mod [S Q] 
        dup
        split Str.Size swap Str.Data cast(Str)
        swap group.1 Str.Equals
    end
end

fn Str.EndsWith Str Str -> bool do

    2 group dup split
    Str.Size swap
    Str.Size swap
    if < do
        drop false
    else
        dup dup
        split Str.Size swap Str.Size swap -
        swap group.0 swap Str.ShiftRightBy
        swap group.1 Str.Equals
    end

end

fn Str.SplitLine Str -> Str Str bool do

    dup
    while   
        dup dup
        Str.Size 0 > swap
        if "\n" Str.StartsWith do
            false
        else
            true
        end
        and 
    do
        1 Str.ShiftRightBy
    end

    if dup Str.Size 0 > do
        // Successful Split
        
        1 Str.ShiftRightBy

        // swap dup Str.Size putu
        
        2 group dup dup split
        Str.Data cast(int) swap
        Str.Data cast(int) -
        1 - 

        swap group.0 Str.Data cast(Str)
        swap group.1 swap
        true

    else
        // No newline present
        swap
        false

    end
    
end

fn Str.StripLeft Str -> Str do
    while dup 0 Str.At 32 == do
        1 Str.ShiftRightBy
    end 
end

fn Str.StripRight Str -> Str do
    
    while 
        if dup Str.Size 0 > do
            if dup dup Str.Size 1 - Str.At 32 == do
                
                split swap 1 - swap cast(Str)
                true
            else
                false
            end
        else
            false
        end
    do end 
end

fn Str.Split Str -> Str Str bool do

    dup
    while   
        dup dup
        Str.Size 0 > swap
        if " " Str.StartsWith do
            false
        else
            true
        end
        and 
    do
        1 Str.ShiftRightBy
    end

    if dup Str.Size 0 > do
        // Successful Split
        
        1 Str.ShiftRightBy

        // swap dup Str.Size putu
        
        2 group dup dup split
        Str.Data cast(int) swap
        Str.Data cast(int) -
        1 - 

        swap group.0 Str.Data cast(Str)
        swap group.1 swap
        true

    else
        // No Spaces present
        swap false

    end

end

fn Str.Numeric Str -> bool do
    
    if dup Str.Size 0 > do

        true swap
        while
            if dup Str.Size 0 > do
                if dup 0 Str.At ASCII_0 < do
                    swap drop false swap
                    false
                else dup 0 Str.At ASCII_9 > do
                    swap drop false swap
                    false
                else
                    true
                end
            else
                false
            end 
        do 
            1 Str.ShiftRightBy
        end 
        drop
    else
        drop false
    end


end

fn Str.ChopByDelim Str int -> Str Str do


    swap
    2 group
    if dup split 0 Str.At == do
        split
        swap drop
        
        dup 1 swap Str.Data cast(Str) swap
        1 Str.ShiftRightBy swap

    else
        split 
    
        dup
        split swap drop 0 swap cast(Str) swap

        while
            
            if dup Str.Size 0 > do
                
                3 group dup dup
                group.0 swap
                group.2
                // [D S' S] D==S1[0]
                if 0 Str.At == do
                    split
                    false
                else
                    split
                    true
                end
            else
                false
            end
        do 
            // Delim S0 S1
            1 Str.ShiftRightBy swap
            split swap 1 + swap cast(Str) swap
        end

        if dup Str.Size 0 > do
            1 Str.ShiftRightBy swap
            split swap 1 + swap cast(Str) swap
        end

        2 group
        swap drop split swap
    end

    
end