use "std.tlp"
use "libs/stack.tlp"

const StrStackCap 10 end
reserve StrStackData StrStackCap SizeOf(Str) * end
reserve StrStackPtr SizeOf(ptr) end
reserve StrStackSize SizeOf(int) end

fn Stk -> with Str -> Stack do
    &@Str &!Str SizeOf(Str) cast(TypeInfo)
    StrStackPtr
    StrStackSize
    StrStackCap
    cast(Stack)
end

Stk with Str do Stack.Print

"StrStackData: " puts StrStackData cast(int) putu

Stk StrStackData with Str do Stack.Init
Stk "Hello Stacks... 0" with Str do Stack.Push
Stk "Hello Stacks... 1" with Str do Stack.Push
Stk "Hello Stacks... 2" with Str do Stack.Push
Stk "Hello Stacks... 3" with Str do Stack.Push
Stk "Hello Stacks... 4" with Str do Stack.Push
Stk "Hello Stacks... 5" with Str do Stack.Push
Stk "Hello Stacks... 6" with Str do Stack.Push
Stk "Hello Stacks... 7" with Str do Stack.Push
Stk "Hello Stacks... 8" with Str do Stack.Push
Stk "Hello Stacks... 9" with Str do Stack.Push

0 while dup 10 < do
    "Item at index " puts dup putd ": " puts
    dup Stk swap with Str do Stack.At puts 
    "\n" puts
    1 + 
end drop

0 while dup 10 < do
    "Read: `" puts Stk with Str do Stack.Pop puts "`\n" puts
    1 +
end drop

Stk with Str do Stack.Print