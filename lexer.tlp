use "std.tlp"
use "libs/stack.tlp"

const INVALID 0 1 - end

struct Loc
    int // column
    int // line
    Str // file
end

fn Loc.AddToColumn Loc int -> Loc do
    
    push split pop
    swap push
    swap push
    + pop pop cast(Loc)
end

fn Loc.IncrementLine Loc -> Loc do

    split push swap drop
    1 swap 1 + pop cast(Loc)
    
end

fn Loc.fPrint Loc FileDesc do 
    push split pop
    swap fputs 
    ":" fputs 
    swap fputd 
    ":" fputs
    swap fputd
    drop
end

fn Loc.Print Loc do
    stdout Loc.fPrint
end

fn Loc.ePrint Loc do
    stderr Loc.fPrint
end

enum TokenValueKind int Str bool word end
struct TokenValue
    int // int value
    Str // Str Value
    int // kind
end

fn TokenValue.Kind TokenValue -> int do
    TokenValue.2
end

fn TokenValue.FromInt int -> TokenValue do
    "" TokenValueKind.int cast(TokenValue)
end

fn TokenValue.FromStr Str -> TokenValue do
    INVALID swap TokenValueKind.Str cast(TokenValue)
end

fn TokenValue.FromBool bool -> TokenValue do
    if do 1 else 0 end "" TokenValueKind.bool cast(TokenValue)
end

fn TokenValue.Int TokenValue -> int do
    split
    if TokenValueKind.int == do
        drop
    else
        "Tried to get int from non-int TokenValue." eputs
        1 exit
        drop
    end
end

fn TokenValue.Str TokenValue -> Str do
    split
    if TokenValueKind.Str == do
        swap drop
    else
        "Tried to get Str from non-Str TokenValue." eputs
        1 exit
        swap drop
    end
end

fn TokenValue.Bool TokenValue -> bool do
    split
    if TokenValueKind.bool == do
        drop if 1 == do
            true
        else
            false
        end
    else
        "Tried to get bool from non-bool TokenValue." eputs
        1 exit
        drop drop false
    end
end

struct Token
    Loc         // loc
    TokenValue  // value
    int         // type
end

fn Token.Loc Token -> Loc do
    Token.0
end

fn Token.Value Token -> TokenValue do
    Token.1
end

fn Token.Type Token -> int do
    Token.2
end

fn Token.Default -> Token do
    INVALID INVALID "" cast(Loc)
    "" TokenValue.FromStr
    INVALID cast(Token)
end

const TokensBufferCap 100000 end
reserve TokensBufferData TokensBufferCap SizeOf(Token) * end
reserve TokensBufferSize SizeOf(int) end
reserve TokensBufferPtr  SizeOf(ptr) end

fn TokensBuffer -> with Token -> Stack do
    &@Token &!Token SizeOf(Token) cast(TypeInfo)
    TokensBufferPtr
    TokensBufferSize
    TokensBufferCap
    cast(Stack)
end
TokensBuffer TokensBufferData with Token do Stack.Init

fn TokensBuffer.Push Token do
    TokensBuffer swap with Token do Stack.Push
end

fn TokensBuffer.Size -> int do
    TokensBuffer with Token do Stack.Size
end

enum Token.Type
    Keyword
    Intrinsic
    int
    Str
    bool
    Word
end

enum Keyword
    IF
    DO
    ELSE
    END
    WHILE
    FN
    STRUCT
    ARROW
    INCLUDE
    CONST
    RESERVE
    WITH
    ENUM
end

fn Keyword.Print int do
    Keyword.ToStr stdout swap fputs drop 
end

fn Keyword.ePrint int do
    Keyword.ToStr stderr swap fputs drop
end

enum Intrinsic
    ADD
    SUB
    MUL
    DIV
    MOD
    EQ
    LE
    LSL
    LT
    GT
    READ64
    READ8
    WRITE64
    WRITE8
    RPUSH
    RPOP
    OR
    AND
    PUTU
    DUP
    DROP
    SWAP
    SPLIT
    CAST
    INNER_TUPLE
    CAST_TUPLE
    SIZE_OF
    CALL
    ADDR_OF
    SYSCALL0
    SYSCALL1
    SYSCALL2
    SYSCALL3
    SYSCALL4
    SYSCALL5
    SYSCALL6
end

fn Intrinsic.Print int do
    Intrinsic.ToStr stdout swap fputs drop
end

fn Token.Print Token do

    dup Token.Loc Loc.Print ": " puts
    split
    if dup Token.Type.Keyword == do
        drop "Keyword: " puts TokenValue.Int Keyword.Print "\n" puts
    else dup Token.Type.Intrinsic == do
        drop "Intrinsic: " puts TokenValue.Int Intrinsic.Print "\n" puts
    else dup Token.Type.int == do 
        drop "INT: " puts TokenValue.Int putu
    else dup Token.Type.bool == do
        drop "BOOL: " puts 
        if TokenValue.Bool do
            "true\n"
        else
            "false\n"
        end
        puts
    else dup Token.Type.Str == do
        drop "STRING: " puts TokenValue.Str puts "\n" puts
    else dup Token.Type.Word == do
        drop "WORD: " puts TokenValue.Str puts "\n" puts
    else
        "Unrecognized Token\n" puts
        drop drop 
    end

    drop
end

fn Token.ePrint Token do

    dup Token.Loc Loc.Print ": " eputs
    split
    if dup Token.Type.Keyword == do
        drop "Keyword: " eputs TokenValue.Int Keyword.Print
    else dup Token.Type.Intrinsic == do
        drop "Intrinsic: " eputs TokenValue.Int Intrinsic.Print
    else dup Token.Type.int == do 
        drop "INT: " eputs TokenValue.Int putu
    else dup Token.Type.bool == do
        drop "BOOL: " eputs 
        if TokenValue.Bool do
            "true"
        else
            "false"
        end
        eputs
    else dup Token.Type.Str == do
        drop "STRING: " eputs TokenValue.Str eputs
    else dup Token.Type.Word == do
        drop "WORD: " eputs TokenValue.Str eputs
    else
        "Unrecognized Token" eputs
        drop drop 
    end

    drop
end

fn IsKeyword Str -> int bool do

    if   dup "if" Str.Equals do
        drop Keyword.IF
    else dup "do" Str.Equals do
        drop Keyword.DO 
    else dup "else" Str.Equals do
        drop Keyword.ELSE 
    else dup "end" Str.Equals do
        drop Keyword.END 
    else dup "while" Str.Equals do
        drop Keyword.WHILE 
    else dup "fn" Str.Equals do
        drop Keyword.FN 
    else dup "struct" Str.Equals do
        drop Keyword.STRUCT 
    else dup "->" Str.Equals do
        drop Keyword.ARROW 
    else dup "use" Str.Equals do
        drop Keyword.INCLUDE 
    else dup "const" Str.Equals do
        drop Keyword.CONST 
    else dup "reserve" Str.Equals do
        drop Keyword.RESERVE 
    else dup "with" Str.Equals do
        drop Keyword.WITH
    else dup "enum" Str.Equals do
        drop Keyword.ENUM
    else
        drop INVALID
    end

    if dup INVALID == do
        false
    else
        true
    end

end

fn IsIntrinsic Str -> int bool do

    if dup "+" Str.Equals do
        drop Intrinsic.ADD 
    else dup "-" Str.Equals do
        drop Intrinsic.SUB
    else dup "*" Str.Equals do
        drop Intrinsic.MUL
    else dup "/" Str.Equals do
        drop Intrinsic.DIV
    else dup "%" Str.Equals do
        drop Intrinsic.MOD
    else dup "==" Str.Equals do
        drop Intrinsic.EQ
    else dup "<=" Str.Equals do
        drop Intrinsic.LE
    else dup "<<" Str.Equals do
        drop Intrinsic.LSL
    else dup "<" Str.Equals do
        drop Intrinsic.LT
    else dup ">" Str.Equals do
        drop Intrinsic.GT
    else dup "@64" Str.Equals do
        drop Intrinsic.READ64
    else dup "@8" Str.Equals do
        drop Intrinsic.READ8
    else dup "!8" Str.Equals do
        drop Intrinsic.WRITE8
    else dup "!64" Str.Equals do
        drop Intrinsic.WRITE64
    else dup "or" Str.Equals do
        drop Intrinsic.OR
    else dup "and" Str.Equals do
        drop Intrinsic.AND
    else dup "putu" Str.Equals do
        drop Intrinsic.PUTU
    else dup "dup" Str.Equals do
        drop Intrinsic.DUP
    else dup "drop" Str.Equals do
        drop Intrinsic.DROP
    else dup "swap" Str.Equals do
        drop Intrinsic.SWAP
    else dup "split" Str.Equals do
        drop Intrinsic.SPLIT
    else 
        dup dup 
        "cast(" Str.StartsWith swap
        ")" Str.EndsWith and
    do
        drop Intrinsic.CAST
    else dup "group." Str.StartsWith do
        drop Intrinsic.INNER_TUPLE
    else dup "group" Str.Equals do
        drop Intrinsic.CAST_TUPLE
    else 
        dup dup 
        "SizeOf(" Str.StartsWith swap
        ")" Str.EndsWith and
    do
        drop Intrinsic.SIZE_OF
    else dup "call" Str.Equals do
        drop Intrinsic.CALL
    else dup "&" Str.StartsWith do
        drop Intrinsic.ADDR_OF
    else dup "syscall0" Str.Equals do
        drop Intrinsic.SYSCALL0
    else dup "syscall1" Str.Equals do
        drop Intrinsic.SYSCALL1
    else dup "syscall2" Str.Equals do
        drop Intrinsic.SYSCALL2
    else dup "syscall3" Str.Equals do
        drop Intrinsic.SYSCALL3
    else dup "syscall4" Str.Equals do
        drop Intrinsic.SYSCALL4
    else dup "syscall5" Str.Equals do
        drop Intrinsic.SYSCALL5
    else dup "syscall6" Str.Equals do
        drop Intrinsic.SYSCALL6
    else dup "push" Str.Equals do
        drop Intrinsic.RPUSH
    else dup "pop" Str.Equals do
        drop Intrinsic.RPOP
    else
        drop INVALID
    end

    if dup INVALID == do
        false
    else
        true
    end

end

fn IntoToken Loc Str -> Token do

    // Str int
    if dup IsKeyword do
        swap drop TokenValue.FromInt Token.Type.Keyword cast(Token)
    else drop dup IsIntrinsic do
        swap drop TokenValue.FromInt Token.Type.Intrinsic cast(Token)
    else drop dup Str.Numeric do
        Str.ToInt TokenValue.FromInt Token.Type.int cast(Token)
    else dup "true" Str.Equals do
        drop true TokenValue.FromBool Token.Type.bool cast(Token) 
    else dup "false" Str.Equals do
        drop false TokenValue.FromBool Token.Type.bool cast(Token) 
    else 
        // Str
        dup dup
        0 Str.At ASCII_DOUBLE_QUOTE == swap
        dup Str.Size 1 - Str.At ASCII_DOUBLE_QUOTE == 
        and
    do
        TokenValue.FromStr Token.Type.Str cast(Token)
    else dup Str.Size 0 > do
        TokenValue.FromStr Token.Type.Word cast(Token)
    else
        TokenValue.FromStr INVALID cast(Token)
    end


end

fn update_loc 
    Loc Str Str Str     // LOC F L W 
    -> 
    Loc Str Str Loc Str // LOC_Updated F L LOC W
 do

    // Loc F [L W] D
    2 group dup split
    Str.Data cast(int) swap
    Str.Data cast(int) swap -

    // LOC_UP F [Loc F D L W] 
    swap split
    5 group

    dup dup 
    group.0 swap group.2
    Loc.AddToColumn swap    // Loc Up
    dup group.1 swap        // F
    dup group.3 swap        // L
    dup group.0 swap        // LOC
    group.4                 // W

end

fn not_comment Str -> bool do
    if dup Str.Size 1 > do
        
        dup 1 Str.ShiftRightBy "/" Str.StartsWith swap
        "/" Str.StartsWith and not
    else
        drop true
    end
end

fn line_split_next Str -> Str Str do

    // "Begin: |" puts dup puts "|\n" puts
    if dup 0 Str.At ASCII_DOUBLE_QUOTE == do

        ASCII_DOUBLE_QUOTE Str.ChopByDelim swap
        ASCII_DOUBLE_QUOTE Str.ChopByDelim swap
        3 group dup split drop

        2 group dup
        split
        Str.Size swap Str.Size +
        swap

        split drop Str.Data
        cast(Str)
        swap group.2 swap

    else
        " " 0 Str.At Str.ChopByDelim 
        // if dup Str.Size 0 > do
            
        //     // S S[(S.Size-1)]
        //     if dup dup Str.Size 1 - Str.At " " 0 Str.At == do
        //         1 Str.ShiftLeftBy
        //     end
        // end
    end

    // "*********************************\n" puts
    // 2group dup split
    // "  Before Strip Next: |" puts puts "|\n" puts
    // "  Before Strip Remain: |" puts puts "|\n" puts
    // split

    Str.StripRight
    // swap Str.StripLeft swap

    // 2group dup split
    // "  After Strip Next: |" puts puts "|\n" puts
    // "  After Strip Remain: |" puts puts "|\n" puts
    // split 

end

fn bor bool bool -> bool do

    if do
        drop true
    else do
        true
    else
        false
    end

end

fn tokenize_line 
    Loc Str Str // Loc F L
    -> 
    Loc Str     // Loc F
do
    // Loc F L W
    // "Line: |" puts dup puts "|\n" puts
    line_split_next
    // "  Word: `" puts dup puts "`\n" puts swap
    // "  Rem:  `" puts dup puts "`\n" puts swap 
    while
        // L W    
        // NC (W.Sz 0 >)
        dup not_comment push swap
        dup Str.Size 0 > push swap
        dup Str.Size 0 > 
        pop bor pop and
    do
        
        update_loc
        IntoToken
        if dup Token.Type INVALID == do
            drop
        else
            TokensBuffer.Push
            // Token.Print
        end
        
        line_split_next
        // "  Word: `" puts dup puts "`\n" puts swap
        // "  Rem:  `" puts dup puts "`\n" puts swap 
    
    end
    drop drop
    
end

fn tokenize_file Str do

    dup 
    1 swap 1 swap cast(Loc) swap
    load_file_to_str
    while 
        if Str.SplitLine do 
            // "A: `" puts dup puts "`\n" puts
            // "B: `" puts dup puts "`\n" puts
        
            // Loc File_rem Line
            tokenize_line true
        else
            tokenize_line
            false 
        end
    do
        swap Loc.IncrementLine swap
    end 
    
    drop drop

end

"lexer.tlp" tokenize_file
// TokensBuffer.Reverse

0
while dup TokensBuffer.Size < do 
    dup TokensBuffer swap with Token do Stack.At Token.Print
    1 +
end drop